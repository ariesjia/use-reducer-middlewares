{"version":3,"file":"main.952d16eaeb70129ca270.bundle.js","sources":["webpack:///./src/index.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nfunction compose(chain) {\n    return function (store, dispatch) {\n        return chain.reduceRight(function (res, middleware) {\n            return middleware(store)(res);\n        }, dispatch);\n    };\n}\nvar useReducerMiddlewares = function (reducer, initialState, initializer) {\n    if (initializer === void 0) { initializer = function (state) { return state; }; }\n    return function (middlewares) {\n        if (middlewares === void 0) { middlewares = []; }\n        var ref = react_1.useRef(initializer(initialState));\n        var rerender = react_1.useState()[1];\n        var middlewareDispatch;\n        var dispatch = function (action) {\n            ref.current = reducer(ref.current, action);\n            rerender({});\n            return action;\n        };\n        var composedMiddleware = react_1.useMemo(function () {\n            return compose(middlewares);\n        }, middlewares);\n        var middlewareAPI = {\n            getState: function () { return ref.current; },\n            dispatch: function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                return middlewareDispatch.apply(void 0, args);\n            },\n        };\n        middlewareDispatch = composedMiddleware(middlewareAPI, dispatch);\n        return [\n            ref.current,\n            middlewareDispatch,\n        ];\n    };\n};\nexports.default = useReducerMiddlewares;\n"],"mappings":"AACA","sourceRoot":""}